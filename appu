#!/usr/bin/env ruby

APP_DIR = "/Applications"

def guess(key)
  list = Array.new
  Dir["#{APP_DIR}/*"].each do |app|
    if app.gsub("#{APP_DIR}/","").gsub("\ ","").downcase.start_with? key.downcase
      list.push app
    end
  end
  list
end

STASH_HEAP = 10000
require 'fileutils'
target_dir = "/usr/local/etc/appu"
target_file = "#{target_dir}/stash"

operation = ARGV[0]

def help()
  line = "=============="
  tab = "     "
  puts line
  printf tab
  puts "appu"
  puts line
  puts "appu list/ls [keyword] ... enlist applications start with the keyword"
  puts "appu         [keyword] ... open the application start with the kw."
  puts "                        if multiple apps found, those are enlisted"
  puts "appu kill    [keyword]  ... kill the application starts with the kw"
  puts "appu web     [keywords] ... "
  puts "appu stash   [link] (optional:[tag])     ... stash link "
  puts "appu rand    (optional:tag)           ... randomly retrieves & opens stashed link"
  puts "appu listlink/ll           ... list all links"
  puts "appu listlink [tag]          ... list all links related to tag"
  puts "appu listtag/lt            ... list all tags"
  puts "appu -[tag]            ... list links of the tag"
  puts
  abort
end

def tagexists(line, tag)
  lsp = line.split(',')
  #puts "#{lsp}"
  return  (lsp.include?("#{tag}\n")) || (lsp.include?(tag))
end

def format_link_et_tag(line)
  lsp = line.split(',')
  limit = 60
  if lsp.size > 1
    (1..lsp.size-1).each do |e|
      printf "[#{lsp[e].chomp}] "
    end
    if lsp[0] != nil
      puts  "#{lsp[0][0..limit]}"
    else
      puts
    end
  else
    puts "[none] #{line[0..limit]}"
  end
end

def listlink(target_file, tag)
  File.open(target_file, "r").each do |line|
    if ((tag == nil) || tagexists(line, tag))
      format_link_et_tag(line)
    end
  end
end

case operation
when "help"
  help
when "listtag", "lt"
  bucket = Array.new
  File.open(target_file, "r").each do |line|
    ls = line.split(',')
    (1 .. ls.size-1).each do |e|
      if bucket.include?(ls[e].chomp) == false
        bucket.push ls[e].chomp
      end
    end
  end
  counter = 0
  hor_len = 6
  bucket.each do |tag|
    if counter == hor_len
      puts
      counter = 0
    else
      print "[#{tag}]"
    end
    counter += 1
  end
  puts
when "listlink", "ll"
  listlink(target_file, ARGV[1])
when "rand" #read the olderst and bring it to the top heap
  def open(stack, r)
    numero = 0
    stack.each do |line|
      if (numero == r)
        system("open #{line.split(',')[0]}")
      end
      numero = numero + 1
    end
  end

  numero = 0
  if ARGV.size == 1
    stack = Array.new
    File.open(target_file, "r").each do |line|
      stack.push line
      numero = numero + 1
    end
    r =  rand(numero)
    open stack, r
  else
    stack = Array.new
    File.open(target_file, "r").each do |line|
      if (tagexists(line, ARGV[1]))
        stack.push line
        numero = numero + 1
      end
    end
    r =  rand(numero)
    open stack, r
  end
when "stash" #stash web location
  if ARGV.size < 2
    abort "you need link"
  end
  FileUtils.mkdir_p target_dir
  link = ARGV[1]

  arr = Array.new
  counter = 0
  if File.exist? target_file
    File.open(target_file, "r").each do |line|
      #stash maximum 1000, the olderst eliminated
      if counter < STASH_HEAP
        arr.push line
      end
      counter = counter + 1
    end
  end

  f = File.open(target_file, "w")
    if ARGV.size > 2
      for i in (2 .. ARGV.size-1) do
         link = link + ",#{ARGV[i]}"
      end
    end
    if link.start_with? "http"
      f.puts link
    end
    arr.each do |line|
      f.puts line
    end
  f.close
when "web", "w" #webfind
  url = "https://www.google.co.jp/search?q="
  li = ARGV.size-1 #last_index
  if li == 0
    abort "ERROR: you need to punch in the serch words"
  end
  (1..li-1).each do |i|
    url += "#{ARGV[i]}+"
  end
  system("open #{url+ARGV[li]}")
when "list", "lis", "li", "ls"
  if ARGV.size < 2
    abort "arg size insufficient"
  end
  puts guess ARGV[1]
when "clean" #clean trash
  system("rm -rf ~/.Trash/*")
when "renamefiles"
  dir_location = "#{ARGV[1]}/*"
  from = ARGV[2]
  to = ARGV[3]
  if ARGV.size < 4
    abort "argument size non sufficient"
  end
  Dir[dir_location].each do |file|
    #if file.include? from
    #end
    puts file
  end
when "del"
  #solve conflict!
  command = "mv "
  (1 .. ARGV.size-1).each do |x|
    file = ARGV[x]
    filepath = "~/.Trash/#{file}"
    puts "fp: #{filepath}"
    if (File.exist?(filepath) || Dir.exist?(filepath))
      puts "pass"
      file2 = file + Time.now.to_s
      system("mv #{file} #{file2}")
    end
    command += "#{file} "
  end
  command += "~/.Trash"
  system(command)
when "kill"
  if ARGV.size < 2
    abort "arg size insufficient"
  end
  list = guess ARGV[1]
  if list.size == 1
    res = %x(ps aux | grep "#{list[0].gsub(" ","\\ ")}")
    puts "Do you really want #{list[0]} be dead? [Y/n]"
    ans = $stdin.gets.chomp
    if (ans.downcase == "y")
      system("kill #{res.split(' ')[1]}")
    else
    end
  else
    puts list
  end
else
  if ARGV.size == 0
    help
  end
  list = guess ARGV[0]
  if list.size == 0
    if ARGV[0].start_with? "-"
      listlink target_file, ARGV[0].gsub("-","")
    else
      help
    end
  elsif list.size == 1
    system("open #{list[0].gsub(" ","\\ ")}")
  else
    puts list
  end
end
