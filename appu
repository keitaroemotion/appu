#!/usr/bin/env ruby

APP_DIR = "/Applications"
$COMMA = ','
def guess(key)
  list = Array.new
  Dir["#{APP_DIR}/*"].each do |app|
    if app.gsub("#{APP_DIR}/","").gsub("\ ","").downcase.start_with? key.downcase
      list.push app
    end
  end
  list
end

STASH_HEAP = 10000
require 'fileutils'
$target_dir = "/usr/local/etc/appu"
$target_file = "#{$target_dir}/stash"
$target_bookmark = "#{$target_dir}/bookmark"
$target_todo = "#{$target_dir}/todo"

operation = ARGV[0]

def get_args(msg)
  printf "#{msg} "
  arr = Array.new
  $stdin.gets.chomp.split(' ').each do |e|
    arr.push e
  end
  if arr.size == 0
    bort "ERROR: argument non sufficient"
  end
  arr
end

def help()
  line = "==========================================="
  tab = "                  "
  puts line
  printf tab
  puts "†appu †  ".cyan
  puts line
  def puts_c(a,b)
    printf a.green
    printf b
    puts
  end
  puts_c "open           ", " ... open the application start with the kw."
  puts_c "kill [keyword] ", " ... kill the application starts with the kw"
  puts_c "web            ", " ... search with browser "
  puts_c "link or l      ", " ... links"
  puts_c "todo           ", " ... manage todo"
  puts_c "book           ", " ... bookmarking function"
  puts_c "//             ", " ... open the link containing the keyword"
  puts
end

require 'colorize'

def tagexists(line, tag)
  lsp = line.split(',')
  return  (lsp.include?("#{tag}\n")) || (lsp.include?(tag))
end

def format_link_et_tag(line)
  lsp = line.split(',')
  limit = 60
  if lsp.size > 1
    (1..lsp.size-1).each do |e|
      printf "["
      printf "#{lsp[e].chomp.green}"
      printf "]"
    end
    if lsp[0] != nil
      puts  "#{lsp[0][0..limit]}"
    else
      puts
    end
  else
    puts "[none] #{line[0..limit]}"
  end
end

def listlink(tag)
  File.open($target_file, "r").each do |line|
    if ((tag == nil) || tagexists(line, tag))
      format_link_et_tag(line)
    end
  end
end

def getDateString()
  t = Time.now
  printf "Year[yyyy]#{t.year}:"
  year = assign($stdin.gets.gsub("\n",""), t.year)
  printf "Month[MM]#{t.month}:"
  month = assign($stdin.gets.gsub("\n",""), t.month)
  printf "Day[dd]#{t.day}:"
  day = assign($stdin.gets.gsub("\n",""), t.day)
  return  "#{year},#{month},#{day}"
end
def assign(from, to)
  if from == ""
    from = to
  end
  from
end

def task()
  def format(str)
    str = str.to_s
    if str.size == 1
      return "0#{str}"
    else
      return str
    end
  end



  t = Time.now
  date = "#{t.year},#{t.month},#{t.day}"
  today_date = Time.now
  # actually putting in and comparing date obj is the most effective way...

  File.open($target_todo, "r").each do |line|

    def get_date(ls)
      year  =  ls[1].chomp
      month =  ls[2].chomp
      day   =  ls[3].chomp
      Time.new year, month, day
    end

    ls = line.split(',')
    haec_time = get_date(ls)

    def left_older(old, new) #
      yd = new.year - old.year
      if yd > 0
        return 0 # true
      elsif yd < 0
        return 1 # false
      else
        # could be equal : -1
      end
      md = new.month - old.month
      if md > 0
        return 0 # true
      elsif md < 0
        return 1 # false
      else
        # could be equal : -1
      end
      dd = new.day - old.day
      if dd > 0
        return 0
      elsif dd < 0
        return 1
      else
        return -1
      end
    end

    (1..ls.size-1).each do |i|
      compared_res = left_older(haec_time, today_date)
      if compared_res == 0
        print "#{format(ls[i].chomp).blue} "
      elsif compared_res == 1
        print "#{format(ls[i].chomp).green} "
      else
        print "#{format(ls[i].chomp).red} "
      end
    end
    print ls[0]
    puts
  end
end

def taskadd()
  date = getDateString
  printf "Text: "
  text = $stdin.gets.gsub(","," ").gsub("\n","")
  if text == ""
    bort "ERROR: you need to input text".red
  end
  text =  "#{text},#{date}"

  todos = Array.new
  if File.exist? $target_todo
    File.open($target_todo, "r").each do |e|
      todos.push e.gsub("\n","")
    end
  end

  f = File.open($target_todo, "a")

  if todos.include?("#{text}") == false
    f.puts text
  else
    puts "the following data already exists: #{text}"
  end
  f.close
end

def taskdel()
  date = getDateString
  print "Enter search word: "
  search_term = $stdin.gets.chomp
  if search_term == nil
    bort
  end
  def matches(line, search_term, date)
    if(line.downcase.start_with?(search_term.downcase))
      if(line.chomp.end_with?(date))
        return true
      end
    end
    return false
  end

  todos = Array.new
  File.open($target_todo, "r").each do |line|
    if !matches line, search_term, date
      todos.push line
    end
  end
  f = File.open($target_todo, "w")
  todos.each do |e|
    f.puts e
  end
  puts "--------------------------------------------------"
  f.close
end

def open_rand(tag)
  filtered = true
  if tag == ""
   filtered = false
  end
  def open(stack, r)
    numero = 0
    stack.each do |line|
      if (numero == r)
        system("open #{line.split(',')[0]}")
      end
      numero = numero + 1
    end
  end

  numero = 0
  if filtered == false
    stack = Array.new
    File.open($target_file, "r").each do |line|
      stack.push line
      numero = numero + 1
    end
    r =  rand(numero)
    open stack, r
  else
    stack = Array.new
    File.open($target_file, "r").each do |line|
      if (tagexists(line, tag))
        stack.push line
        numero = numero + 1
      end
    end
    r =  rand(numero)
    open stack, r
  end
end

def list_tags()
  bucket = Array.new
  File.open($target_file, "r").each do |line|
    ls = line.split(',')
    (1 .. ls.size-1).each do |e|
      if bucket.include?(ls[e].chomp) == false
        bucket.push ls[e].chomp
      end
    end
  end
  counter = 0
  hor_len = 6
  bucket.each do |tag|
    if counter == hor_len
      puts
      counter = 0
    else
      print "[#{tag.green}]"
    end
    counter += 1
  end
  puts
end

def stash_link(link, tags)
  FileUtils.mkdir_p $target_dir

  arr = Array.new
  counter = 0
  if File.exist? $target_file
    File.open($target_file, "r").each do |line|
      #stash maximum 1000, the olderst eliminated
      if counter < STASH_HEAP
        arr.push line
      end
      counter = counter + 1
    end
  end

  f = File.open($target_file, "w")
    if tags.size > 0
      for i in (0 .. tags.size-1) do
         link = link + ",#{tags[i]}"
      end
    end
    if link.start_with? "http"
      f.puts link
    end

    arr.each do |line|
      f.puts line
    end
  f.close
end

def bort(msg="")
  print msg.red
  print "[#{$GROUND}]> "
  operate $stdin.gets.chomp
end

#################################################################

                          # Main

#################################################################

current_location = ""
$GROUND = "home"
def operate(operation)
  case operation
  when "qq"
    abort
  when "q"
    abort
  when "open"
    printf "Enter application name: "
    term = $stdin.gets.chomp
    list = guess term
    if list.size == 0
    elsif list.size == 1
      list[0] = list[0].gsub(" ","\\ ")
      if("/applications/#{term}.app" != list[0].downcase)
        print "You want to open "
        print list[0].gsub(APP_DIR+"/",'').gsub(".app","").gsub("\\","")
  .cyan
        print " ? [Y/n] : "
        if $stdin.gets.chomp.downcase != "y"
          bort
        end
      end
      system("open #{list[0]}")
    else
      puts list
    end
  when "help", "h", "?"
    help
    print "[#{$GROUND}]> "
    operate $stdin.gets.chomp
  when "book" # bookmark
    # book [link] [key] (duplicate not allowed)
    subop = ""

    if ARGV[1] != nil
      subop = ARGV[1]
    else
      print "Choose operation:\n"+
          "\s\sr: register new link \n"+
          "\s\ss: show links        \n"+
          "\s\so: open link         \n"+
          "\s\sd: delete link       \n"+
          "\s\sq: quit              \n"+
          "[book]> "
      subop = $stdin.gets.chomp
    end

    def file_to_array(file)
      arr = Array.new
      if File.exist? file
        File.open(file, "r").each do |line|
          arr.push line
        end
      end
      arr
    end
     def file_to_key_array(file)
       arr = Array.new
       if File.exist? file
         File.open(file, "r").each do |line|
           ls = line.split(',')
           arr.push ls[1].chomp
         end
       end
       arr
     end

  def showkeys()
    numero = 0
    file_to_key_array($target_bookmark).each do |key|
      print "["; print "#{key}".cyan; print "]"
      if(numero == 5)
        puts
      end
      numero += 1
    end
    puts
   end

   case subop
   when "r"
     print "Enter the url:"
     url = $stdin.gets.chomp
     if !url.start_with? "http"
       url = "http://#{url}"
     end
     print "Enter the key:"
     key = $stdin.gets.chomp

     keys = file_to_key_array($target_bookmark)

     f = File.open($target_bookmark, "a")
     if keys.include? key
       puts "the key '#{key}' has already been registered."
     else
       f.puts "#{url},#{key}"
     end
     f.close
   when "s"
     showkeys
   when "d"
     showkeys
     print "Enter the key to delete: "
     key = $stdin.gets.chomp
     copy = Array.new
     file_to_array($target_bookmark).each do |line|
       ls = line.split(',')
       if ls[1].chomp == key
         print "the key".green
         print " #{key} ".red
         print "has been deleted.".green
         puts
       else
         copy.push line
       end
     end
     f = File.open($target_bookmark, "w")
     copy.each do |line|
       f.puts line
     end
     f.close
   when "o"
     opened = false
     showkeys
     print "Enter the key to open: "
     key = $stdin.gets.chomp
     file_to_array($target_bookmark).each do |line|
       ls = line.split(',')
       if ls[1].chomp == key
         system("open #{ls[0].chomp}")
         opened = true
       end
     end
     if opened == false
       file_to_array($target_bookmark).each do |line|
         ls = line.split(',')
         if ls[1].chomp.start_with? key
           print "Do you want to open "
           print ls[1].chomp.green
           print " ("
           print "#{ls[0].chomp.yellow}"
           print ") ? [Y/n]"
           if $stdin.gets.chomp.downcase == "y"
             system("open #{ls[0].chomp}")
           end
         end
       end
     end
   when "q"
   when "qq"
     abort
   else
   end
  when "todo"
    def exe_todo()
      puts
      print "Enter the operation:\n"+
            "\s\ss: show todos\n"+
            "\s\sa: add  todo\n"+
            "\s\sd: del  todo\n"+
            "\s\sq: quit\n"+
            "[todo]> "

      subop = $stdin.gets.chomp
      def putline()
        n = 0
        (1..60).each do |h|
          if n == 0
            print "-"
            n = 1
          else
            print "-".red
            n = 0
          end
        end
        puts
      end
      putline
      case subop
      when "q"
        bort
      when "qq"
        abort
      when "s"
        task
        exe_todo
      when "d"
        task
        puts
        taskdel
        task
        exe_todo
      when "a"
        taskadd
        exe_todo
      else
        exe_todo
      end
      putline
    end
    exe_todo
  when "link", "l"
    def tail()
      print ""
      $stdin.gets.chomp
    end
    def show_linkmenu()
      puts "----------------------------".green
      printf "Your action is:\n"+
           "\s\sl: list all links\n"+
           "\s\sa: add link\n"+
           "\s\sx: open random link\n"+
           "\s\so: open tag-based random link\n"+
           "\s\st: list tags\n"+
           "\s\sr: remove link\n"+
           "\s\sq : quit\n"+
           "------------------------------\n".green
           print "[link]> "
      case $stdin.gets.chomp.strip
      when "q"
        bort
      when "qq"
        abort
      when "r"
        lines = Array.new
        flag = 0
        File.open($target_file,"r").each do |line|

          def ask_line_of_deletion(line)
            print "You wanna remove this link?:\n"
            ls = line.split($COMMA)
            (1..ls.size-1).each do |x|
              print "["
              print ls[x].chomp.green
              print "] "
            end
            print  ls[0].blue
            print " (:y = Yes,  :Enter = No, :q = Quit): "
            res = $stdin.gets.chomp.downcase
            if res == ""
              return line
            elsif res == "q"
              return "-1"
            elsif res == "y"
              puts
              printf "DELETED!".red
              puts
              puts
              return ""
            else
              return ask_line_of_deletion(line)
            end
          end

          if flag == 1
            lines.push line
          else
            line = ask_line_of_deletion line
            if line == "-1"
              flag = 1
            elsif line == ""
            else
              lines.push line
            end
          end
        end

        f = File.open($target_file, "w")
        lines.each do |line|
          f.puts line
        end
        f.close
        tail
        show_linkmenu
      when "l"
        listlink(ARGV[1])
        tail
        show_linkmenu
      when "a"
        def addlink()
          print "url: "
          urllink = $stdin.gets.chomp
          print "tags (ex: tag1 tag2 tag3): "
          tags = Array.new
          $stdin.gets.chomp.split(' ').each do |tag|
            tags.push tag
          end
          stash_link(urllink, tags)
          def askin()
            puts
            print ":q = quit , Enter: = next\n> "
            case $stdin.gets.chomp
            when "q"
             show_linkmenu
            when ""
             addlink
            else
             askin
            end
          end
          askin
        end
        addlink()
        tail
        show_linkmenu
      when "x"
        open_rand ""
        tail
        show_linkmenu
      when "o"
        #todo: list tag
        print "Enter the tag: "
        tag = $stdin.gets.chomp
        open_rand tag
        tail
        show_linkmenu
      when "t"
        list_tags
        tail
        show_linkmenu
      else
        tail
        show_linkmenu
      end
    end
    show_linkmenu
  when "web", "w" #webfind
    url = "https://www.google.co.jp/search?q="


    get_args("Enter search words:").each do |word|
      url += "#{word}+"
    end
    system "open #{url[0 .. url.size-2]}"
  when "clean" #clean trash
    system("rm -rf ~/.Trash/*")
  when "renamefiles"
    dir_location = "#{ARGV[1]}/*"
    from = ARGV[2]
    to = ARGV[3]
    if ARGV.size < 4
      bort "argument size non sufficient"
    end
    Dir[dir_location].each do |file|
      #if file.include? from
      #end
      puts file
    end
  when "del"
    #solve conflict!
    command = "mv "
    (1 .. ARGV.size-1).each do |x|
      file = ARGV[x]
      filepath = "~/.Trash/#{file}"
      puts "fp: #{filepath}"
      if (File.exist?(filepath) || Dir.exist?(filepath))
        puts "pass"
        file2 = file + Time.now.to_s
        system("mv #{file} #{file2}")
      end
      command += "#{file} "
    end
    command += "~/.Trash"
    system(command)
  when "kill"
    if ARGV.size < 2
      bort "arg size insufficient"
    end

    def kill(term)
      list = guess term
      if list.size == 1
        res = %x(ps aux | grep "#{list[0].gsub(" ","\\ ")}")
        whoami = %x(whoami).chomp
        puts "Do you really want #{list[0]} be dead? [Y/n]"
        ans = $stdin.gets.chomp
        if (ans.downcase == "y")
          res.split(whoami).each do |l|
            if (!l.include? "grep")
              system ("kill #{l.split(' ')[0].chomp}")
            end
          end
        else
        end
      else
        puts list
      end
    end
    kill ARGV[1]
  when "//"
    puts "//".yellow
  else
=begin
    list = guess ARGV[0]
    if list.size == 0
      if ARGV[0].start_with? "//"
        numero = 0
        # todo filter only body context : seems hard
        search_terms = Array.new
        (0 .. ARGV.size-1).each do |i|
          search_terms.push ARGV[i].gsub("//","")
        end

        require 'open-uri'
        File.open($target_file, "r").each do |line|
          link =  line.split(',')[0]
          print "seaching ...".green
          print " #{link[0..30]}.."
          puts
          contents = open(link).read

          def term_matches(search_terms, contents)
            search_terms.each do |term|
              if contents.include?(term) == false
                return false
              end
            end
            return true
          end

          if term_matches(search_terms, contents) == true
            system("open #{link}")
            numero = numero+1
          end
        end
        puts
        if numero == 1
          puts "1 page have been found.".yellow
        else
          puts "#{numero} pages have been found.".yellow
        end
        puts
      elsif ARGV[0].start_with? "/"
        tag = ARGV[0].gsub("/","")
        listlink tag
        puts "openere desidero? [Y/n]"
        ans = $stdin.gets.chomp
        if ans.downcase == "y"
          File.open($target_file, "r").each do |line|
            if ((tag == nil) || tagexists(line, tag))
              system("open #{line.split(',')[0]}")
            end
          end
        end
      else
        help
      end
    elsif list.size == 1
      list[0] = list[0].gsub(" ","\\ ")
      if("/applications/#{ARGV[0]}.app" != list[0].downcase)
        print "You want to open "
        print list[0].gsub(APP_DIR+"/",'').gsub(".app","").gsub("\\","")
  .cyan
        print " ? [Y/n] : "
        if $stdin.gets.chomp.downcase != "y"
          bort
        end
      end
      system("open #{list[0]}")
    else
      puts list
    end
=end
  end
  bort
end

operate operation

