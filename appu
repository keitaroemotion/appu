#!/usr/bin/env ruby

APP_DIR = "/Applications"

def guess(key)
  list = Array.new
  Dir["#{APP_DIR}/*"].each do |app|
    if app.gsub("#{APP_DIR}/","").gsub("\ ","").downcase.start_with? key.downcase
      list.push app
    end
  end
  list
end

STASH_HEAP = 10000
require 'fileutils'
target_dir = "/usr/local/etc/appu"
target_file = "#{target_dir}/stash"
$target_bookmark = "#{target_dir}/bookmark"
$target_todo = "#{target_dir}/todo"

operation = ARGV[0]

def help()
  line = "==========================================="
  tab = "                  "
  puts line
  printf tab
  puts "†appu †  ".cyan
  puts line
  puts "appu list/ls [keyword] ... enlist applications start with the keyword"
  puts "appu         [keyword] ... open the application start with the kw."
  puts "                        if multiple apps found, those are enlisted"
  puts "appu kill    [keyword]  ... kill the application starts with the kw"
  puts "appu web     [keywords] ... "
  puts "appu stash   [link] (optional:[tag])     ... stash link "
  puts "appu rand    (optional:tag)           ... randomly retrieves & opens stashed link"
  puts "appu listlink/ll           ... list all links"
  puts "appu listlink [tag]          ... list all links related to tag"
  puts "appu tag/lt            ... list all tags"
  puts "appu /[tag]            ... list links of the tag"
  puts "appu todo                ... manage todo"
  puts "appu //[word]            ... open the link containing the keyword"
  puts "appu desk               ... bookmarking function"
  puts
  abort
end

require 'colorize'

def tagexists(line, tag)
  lsp = line.split(',')
  return  (lsp.include?("#{tag}\n")) || (lsp.include?(tag))
end

def format_link_et_tag(line)
  lsp = line.split(',')
  limit = 60
  if lsp.size > 1
    (1..lsp.size-1).each do |e|
      printf "["
      printf "#{lsp[e].chomp.green}"
      printf "]"
    end
    if lsp[0] != nil
      puts  "#{lsp[0][0..limit]}"
    else
      puts
    end
  else
    puts "[none] #{line[0..limit]}"
  end
end

def listlink(target_file, tag)
  File.open(target_file, "r").each do |line|
    if ((tag == nil) || tagexists(line, tag))
      format_link_et_tag(line)
    end
  end
end

def getDateString()
  t = Time.now
  printf "Year[yyyy]#{t.year}:"
  year = assign($stdin.gets.gsub("\n",""), t.year)
  printf "Month[MM]#{t.month}:"
  month = assign($stdin.gets.gsub("\n",""), t.month)
  printf "Day[dd]#{t.day}:"
  day = assign($stdin.gets.gsub("\n",""), t.day)
  return  "#{year},#{month},#{day}"
end
def assign(from, to)
  if from == ""
    from = to
  end
  from
end

def task()
  def format(str)
    str = str.to_s
    if str.size == 1
      return "0#{str}"
    else
      return str
    end
  end

  t = Time.now
  date = "#{t.year},#{t.month},#{t.day}"
  today = false
  # actually putting in and comparing date obj is the most effective way...
  File.open($target_todo, "r").each do |line|
    ls = line.split(',')
    if line.chomp.end_with? date.chomp
      today = true
    end

    (1..ls.size-1).each do |i|
      if today == false
        print "#{format(ls[i].chomp).green} "
      else
        print "#{format(ls[i].chomp).red} "
      end
    end
    print ls[0]
    puts
  end
end

def taskadd()
  date = getDateString
  printf "Text: "
  text = $stdin.gets.gsub(","," ").gsub("\n","")
  if text == ""
    abort "ERROR: you need to input text".red
  end
  text =  "#{text},#{date}"

  todos = Array.new
  if File.exist? $target_todo
    File.open($target_todo, "r").each do |e|
      todos.push e.gsub("\n","")
    end
  end

  f = File.open($target_todo, "a")

  if todos.include?("#{text}") == false
    f.puts text
  else
    puts "the following data already exists: #{text}"
  end
  f.close
end

def taskdel()
  date = getDateString
  print "Enter search word: "
  search_term = $stdin.gets.chomp
  if search_term == nil
    abort
  end
  def matches(line, search_term, date)
    if(line.downcase.start_with?(search_term.downcase))
      if(line.chomp.end_with?(date))
        return true
      end
    end
    return false
  end

  todos = Array.new
  File.open($target_todo, "r").each do |line|
    if !matches line, search_term, date
      todos.push line
    end
  end
  f = File.open($target_todo, "w")
  todos.each do |e|
    f.puts e
    puts e
  end
  f.close
end


case operation
when "help"
  help
when "desk" # bookmark
  # desk [link] [key] (duplicate not allowed)
  subop = ""

  if ARGV[1] != nil
    subop = ARGV[1]
  else
    print "Choose operation:\n"+
        "\tr: register new link \n"+
        "\ts: show links        \n"+
        "\to: open link         \n"+
        "\td: delete link       \n"+
        "\tq: quit              \n"+
        "> "
    subop = $stdin.gets.chomp
  end

  def file_to_array(file)
    arr = Array.new
    if File.exist? file
      File.open(file, "r").each do |line|
        arr.push line
      end
    end
    arr
  end
   def file_to_key_array(file)
     arr = Array.new
     if File.exist? file
       File.open(file, "r").each do |line|
         ls = line.split(',')
         arr.push ls[1].chomp
       end
     end
     arr
   end

def showkeys()
  numero = 0
  file_to_key_array($target_bookmark).each do |key|
    print "["; print "#{key}".cyan; print "]"
    if(numero == 5)
      puts
    end
    numero += 1
  end
  puts
end


 case subop
 when "r"
   print "Enter the url:"
   url = $stdin.gets.chomp
   if !url.start_with? "http"
     url = "http://#{url}"
   end
   print "Enter the key:"
   key = $stdin.gets.chomp

   keys = file_to_key_array($target_bookmark)

   f = File.open($target_bookmark, "a")
   if keys.include? key
     puts "the key '#{key}' has already been registered."
   else
     f.puts "#{url},#{key}"
   end
   f.close
 when "s"
   showkeys
 when "d"
   showkeys
   print "Enter the key to delete: "
   key = $stdin.gets.chomp
   copy = Array.new
   file_to_array($target_bookmark).each do |line|
     ls = line.split(',')
     if ls[1].chomp == key
       print "the key".green
       print " #{key} ".red
       print "has been deleted.".green
       puts
     else
       copy.push line
     end
   end
   f = File.open($target_bookmark, "w")
   copy.each do |line|
     f.puts line
   end
   f.close
 when "o"
   showkeys
   print "Enter the key to open: "
   key = $stdin.gets.chomp
   file_to_array($target_bookmark).each do |line|
     ls = line.split(',')
     if ls[1].chomp == key
       system("open #{ls[0].chomp}")
     end
   end
 when "q"
 else
 end
when "todo"
  print "Enter the operation:\n"+
        "\ts: show todos\n"+
        "\ta: add  todo\n"+
        "\td: del  todo\n"+
        ">"

  subop = $stdin.gets.chomp
  def putline()
    n = 0
    (1..60).each do |h|
      if n == 0
        print "-"
        n = 1
      else
        print "-".red
        n = 0
      end
    end
    puts
  end
  putline
  case subop
  when "s"
    task
  when "d"
    task
    puts
    taskdel
  when "a"
    taskadd
  else
  end
  putline
when "tag", "lt"
  bucket = Array.new
  File.open(target_file, "r").each do |line|
    ls = line.split(',')
    (1 .. ls.size-1).each do |e|
      if bucket.include?(ls[e].chomp) == false
        bucket.push ls[e].chomp
      end
    end
  end
  counter = 0
  hor_len = 6
  bucket.each do |tag|
    if counter == hor_len
      puts
      counter = 0
    else
      print "[#{tag.green}]"
    end
    counter += 1
  end
  puts
when "listlink", "ll"
  listlink(target_file, ARGV[1])
when "rand" #read the olderst and bring it to the top heap
  def open(stack, r)
    numero = 0
    stack.each do |line|
      if (numero == r)
        system("open #{line.split(',')[0]}")
      end
      numero = numero + 1
    end
  end

  numero = 0
  if ARGV.size == 1
    stack = Array.new
    File.open(target_file, "r").each do |line|
      stack.push line
      numero = numero + 1
    end
    r =  rand(numero)
    open stack, r
  else
    stack = Array.new
    File.open(target_file, "r").each do |line|
      if (tagexists(line, ARGV[1]))
        stack.push line
        numero = numero + 1
      end
    end
    r =  rand(numero)
    open stack, r
  end
when "stash" #stash web location
  if ARGV.size < 2
    abort "you need link"
  end
  FileUtils.mkdir_p target_dir
  link = ARGV[1]

  arr = Array.new
  counter = 0
  if File.exist? target_file
    File.open(target_file, "r").each do |line|
      #stash maximum 1000, the olderst eliminated
      if counter < STASH_HEAP
        arr.push line
      end
      counter = counter + 1
    end
  end

  f = File.open(target_file, "w")
    if ARGV.size > 2
      for i in (2 .. ARGV.size-1) do
         link = link + ",#{ARGV[i]}"
      end
    end
    if link.start_with? "http"
      f.puts link
    end
    arr.each do |line|
      f.puts line
    end
  f.close
when "web", "w" #webfind
  url = "https://www.google.co.jp/search?q="
  li = ARGV.size-1 #last_index
  if li == 0
    abort "ERROR: you need to punch in the serch words"
  end
  (1..li-1).each do |i|
    url += "#{ARGV[i]}+"
  end
  system "open #{url+ARGV[li]}"
when "list", "lis", "li", "ls"
  if ARGV.size < 2
    abort "arg size insufficient"
  end
  puts guess ARGV[1]
when "clean" #clean trash
  system("rm -rf ~/.Trash/*")
when "renamefiles"
  dir_location = "#{ARGV[1]}/*"
  from = ARGV[2]
  to = ARGV[3]
  if ARGV.size < 4
    abort "argument size non sufficient"
  end
  Dir[dir_location].each do |file|
    #if file.include? from
    #end
    puts file
  end
when "del"
  #solve conflict!
  command = "mv "
  (1 .. ARGV.size-1).each do |x|
    file = ARGV[x]
    filepath = "~/.Trash/#{file}"
    puts "fp: #{filepath}"
    if (File.exist?(filepath) || Dir.exist?(filepath))
      puts "pass"
      file2 = file + Time.now.to_s
      system("mv #{file} #{file2}")
    end
    command += "#{file} "
  end
  command += "~/.Trash"
  system(command)
when "kill"
  if ARGV.size < 2
    abort "arg size insufficient"
  end
  list = guess ARGV[1]
  if list.size == 1
    res = %x(ps aux | grep "#{list[0].gsub(" ","\\ ")}")
    puts "Do you really want #{list[0]} be dead? [Y/n]"
    ans = $stdin.gets.chomp
    if (ans.downcase == "y")
      system("kill #{res.split(' ')[1]}")
    else
    end
  else
    puts list
  end
else
  if ARGV.size == 0
    help
  end
  list = guess ARGV[0]
  if list.size == 0
    if ARGV[0].start_with? "//"
      # todo filter only body context : seems hard
      search_term = ARGV[0].gsub("//","")
      require 'open-uri'
      File.open(target_file, "r").each do |line|
        link =  line.split(',')[0]
        puts "seaching ... #{link[0..30]}.."
        contents = open(link).read
        if contents.include? search_term
          system("open #{link}")
        end
      end
    elsif ARGV[0].start_with? "/"
      tag = ARGV[0].gsub("/","")
      listlink target_file, tag
      puts "openere desidero? [Y/n]"
      ans = $stdin.gets.chomp
      if ans.downcase == "y"
        File.open(target_file, "r").each do |line|
          if ((tag == nil) || tagexists(line, tag))
            system("open #{line.split(',')[0]}")
          end
        end
      end
    else
      help
    end
  elsif list.size == 1
    system("open #{list[0].gsub(" ","\\ ")}")
  else
    puts list
  end
end
